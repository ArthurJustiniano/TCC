-- ========================================
-- Tabela Usuario
-- ========================================
DROP TABLE IF EXISTS Usuario CASCADE;

CREATE TABLE Usuario (
  id_usuario SERIAL PRIMARY KEY, -- ID numérico incremental
  nome_usuario VARCHAR(100),
  email_usuario VARCHAR(100) UNIQUE,
  senha_usuario VARCHAR(100),
  telefone VARCHAR(20), -- Novo campo telefone (pode armazenar formato internacional)
  pagamento_status VARCHAR(50),
  tipo_usuario INT NOT NULL,  -- 1 = passageiro, 2 = motorista, 3 = admin
  reset_code VARCHAR(6) NULL,
  reset_expires TIMESTAMP NULL,
  pergunta_seguranca VARCHAR(255) NULL,
  resposta_seguranca VARCHAR(255) NULL
);

-- ========================================
-- Tabela Rota
-- ========================================
DROP TABLE IF EXISTS Rota CASCADE;

CREATE TABLE Rota (
    id_rota SERIAL PRIMARY KEY, -- ID numérico incremental
    nome_rota VARCHAR(100),
    cod_associacao INT,
    FOREIGN KEY (cod_associacao) REFERENCES Usuario(id_usuario)
);

-- ========================================
-- Tabela Ponto
-- ========================================
DROP TABLE IF EXISTS Ponto CASCADE;

CREATE TABLE Ponto (
    id_ponto SERIAL PRIMARY KEY, -- ID numérico incremental
    descricao VARCHAR(255),
    latitude DECIMAL(10, 6),
    longitude DECIMAL(10, 6),
    cod_rota INT,
    FOREIGN KEY (cod_rota) REFERENCES Rota(id_rota)
);

-- ========================================
-- Tabela Presenca
-- ========================================
DROP TABLE IF EXISTS Presenca CASCADE;

CREATE TABLE Presenca (
    id_presenca SERIAL PRIMARY KEY, -- ID numérico incremental
    cod_motorista INT,
    cod_ponto INT,
    data_hora TIMESTAMP,
    FOREIGN KEY (cod_motorista) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (cod_ponto) REFERENCES Ponto(id_ponto)
);

-- ========================================
-- Tabela Pagamento
-- ========================================
DROP TABLE IF EXISTS Pagamento CASCADE;

CREATE TABLE Pagamento (
    id_pagamento SERIAL PRIMARY KEY, -- ID numérico incremental
    cod_passageiro INT,
    valor DECIMAL(10, 2),
    data_pagamento DATE,
    status TEXT CHECK (status IN ('PAGO', 'PENDENTE', 'INADIMPLENTE')),
    FOREIGN KEY (cod_passageiro) REFERENCES Usuario(id_usuario)
);

-- ========================================
-- Tabela Chat
-- ========================================
DROP TABLE IF EXISTS Chat CASCADE;

CREATE TABLE Chat (
    id_chat SERIAL PRIMARY KEY, -- ID numérico incremental
    cod_passageiro INT,
    cod_motorista INT,
    FOREIGN KEY (cod_passageiro) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (cod_motorista) REFERENCES Usuario(id_usuario)
);

-- ========================================
-- Tabela Localizacoes (histórico simples, sem RLS)
-- ========================================
DROP TABLE IF EXISTS Localizacoes CASCADE;

CREATE TABLE Localizacoes (
    id SERIAL PRIMARY KEY, -- ID numérico incremental
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    ultima_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ========================================
-- Tabela locations (para motoristas, vinculada a Usuario)
-- ========================================
DROP TABLE IF EXISTS public.locations CASCADE;

CREATE TABLE public.locations (
    id SERIAL PRIMARY KEY, -- ID numérico incremental
    user_id INT REFERENCES Usuario(id_usuario) ON DELETE CASCADE,
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE public.messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  sender_id BIGINT REFERENCES public.Usuario(id_usuario) NOT NULL,
  receiver_id BIGINT REFERENCES public.Usuario(id_usuario) NOT NULL,
  chat_room_id TEXT NOT NULL,
  message TEXT NOT NULL,
  sender_username TEXT,
  is_read BOOLEAN DEFAULT FALSE
);

-- Tabela para controlar mensagens lidas por usuário
CREATE TABLE public.message_read_status (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message_id BIGINT REFERENCES public.messages(id) NOT NULL,
  user_id BIGINT REFERENCES public.Usuario(id_usuario) NOT NULL,
  read_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  UNIQUE(message_id, user_id)
);

create table if not exists public.payment_info (
  id int primary key,
  content text
);

insert into public.payment_info (id, content)
values (
  1,
  'CHAVE PIX: exemplo@provedor.com\n(Altere este texto no painel de admin)'
)
on conflict (id) do update
set content = excluded.content;

alter table public.payment_info
  add column if not exists amount_content text;

update public.payment_info
set amount_content = coalesce(amount_content, 'Valor mensal: R$ 120,50')
where id = 1;
-- ========================================
-- Inserir usuários
-- ========================================
INSERT INTO Usuario (nome_usuario, email_usuario, senha_usuario, telefone, pagamento_status, tipo_usuario, pergunta_seguranca, resposta_seguranca) VALUES
('Ana Souza', 'ana.souza@email.com', 'ana123', '+55 11 90000-0001', 'PAGO', 1, 'Qual o nome do seu primeiro animal de estimação?', 'rex'),
('Bruno Lima', 'bruno.lima@email.com', 'bruno456', '+55 11 90000-0002', 'PENDENTE', 1, 'Qual o nome da sua mãe?', 'maria'),
('Carla Mendes', 'carla.mendes@email.com', 'carla789', '+55 11 90000-0003', 'PAGO', 1, 'Em que cidade você nasceu?', 'fortaleza'),
('James', 'James@email.com', 'james', '+55 11 98888-0004', NULL, 2, 'Qual seu time do coração?', 'flamengo'),
('Leandro', 'Leandro@email.com', 'leandro', '+55 11 98888-0005', NULL, 2, 'Qual o nome da sua primeira escola?', 'escola central'),
('Davi Beraldi dos Santos', 'daviok25@gmail.com', '32424266', '+55 11 97777-0006', NULL, 3, 'Qual sua comida favorita?', 'pizza'),
('Arthur Justiniano', 'justiniano@email.com', 'justiniano', '+55 11 97777-0007', NULL, 3, 'Qual seu filme favorito?', 'matrix'),
('Arthur Nasioseno de Araujo Baroni', 'Baroni@email.com', 'baroni', '+55 11 97777-0008', NULL, 3, 'Qual o nome da sua rua de infância?', 'rua das flores');

-- ========================================
-- Inserir pagamentos
-- (precisa buscar os IDs dos passageiros após inserir)
-- ========================================
INSERT INTO Pagamento (cod_passageiro, valor, data_pagamento, status)
SELECT id_usuario, 120.50, '2025-07-01', 'PAGO'
FROM Usuario WHERE nome_usuario = 'Ana Souza';

INSERT INTO Pagamento (cod_passageiro, valor, data_pagamento, status)
SELECT id_usuario, 120.50, NULL, 'PENDENTE'
FROM Usuario WHERE nome_usuario = 'Bruno Lima';

INSERT INTO Pagamento (cod_passageiro, valor, data_pagamento, status)
SELECT id_usuario, 120.50, '2025-06-28', 'PAGO'
FROM Usuario WHERE nome_usuario = 'Carla Mendes';

-- ========================================
-- Inserir rotas
-- ========================================
INSERT INTO Rota (nome_rota, cod_associacao)
SELECT 'Linha Centro - Norte', id_usuario FROM Usuario WHERE nome_usuario = 'Ana Souza';

INSERT INTO Rota (nome_rota, cod_associacao)
SELECT 'Linha Sul Expressa', id_usuario FROM Usuario WHERE nome_usuario = 'Bruno Lima';

INSERT INTO Rota (nome_rota, cod_associacao)
SELECT 'Rota Leste Universitária', id_usuario FROM Usuario WHERE nome_usuario = 'Carla Mendes';

INSERT INTO Rota (nome_rota, cod_associacao)
SELECT 'Circular Oeste', id_usuario FROM Usuario WHERE nome_usuario = 'James';

INSERT INTO Rota (nome_rota, cod_associacao)
SELECT 'Linha Popular Centro', id_usuario FROM Usuario WHERE nome_usuario = 'Leandro';

-- ========================================
-- Inserir pontos
-- (buscando a rota pelo nome)
-- ========================================
INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Ponto Central - Terminal Principal', -3.7327, -38.5270, id_rota FROM Rota WHERE nome_rota = 'Linha Centro - Norte';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Av. Norte - Estação 1', -3.7295, -38.5300, id_rota FROM Rota WHERE nome_rota = 'Linha Centro - Norte';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Rua das Palmeiras - Escola Técnica', -3.7255, -38.5330, id_rota FROM Rota WHERE nome_rota = 'Linha Centro - Norte';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Terminal Sul', -3.7650, -38.5420, id_rota FROM Rota WHERE nome_rota = 'Linha Sul Expressa';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Av. Beira Sul - Shopping Sul', -3.7685, -38.5490, id_rota FROM Rota WHERE nome_rota = 'Linha Sul Expressa';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Estação Bairro Novo', -3.7700, -38.5555, id_rota FROM Rota WHERE nome_rota = 'Linha Sul Expressa';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Universidade Estadual - Portão 1', -3.7450, -38.5050, id_rota FROM Rota WHERE nome_rota = 'Rota Leste Universitária';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Biblioteca Central', -3.7480, -38.5020, id_rota FROM Rota WHERE nome_rota = 'Rota Leste Universitária';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Terminal Leste', -3.7510, -38.4980, id_rota FROM Rota WHERE nome_rota = 'Rota Leste Universitária';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Ponto Oeste I - Centro Médico', -3.7600, -38.5750, id_rota FROM Rota WHERE nome_rota = 'Circular Oeste';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Av. Oeste - Fórum', -3.7630, -38.5725, id_rota FROM Rota WHERE nome_rota = 'Circular Oeste';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Praça da Cidadania', -3.7655, -38.5700, id_rota FROM Rota WHERE nome_rota = 'Circular Oeste';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Estação Popular 1', -3.7400, -38.5200, id_rota FROM Rota WHERE nome_rota = 'Linha Popular Centro';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Rua das Flores - Feira', -3.7380, -38.5180, id_rota FROM Rota WHERE nome_rota = 'Linha Popular Centro';

INSERT INTO Ponto (descricao, latitude, longitude, cod_rota)
SELECT 'Ponto Final - Mercado Municipal', -3.7355, -38.5155, id_rota FROM Rota WHERE nome_rota = 'Linha Popular Centro';

-- ========================================
-- Inserir presenças
-- ========================================
INSERT INTO Presenca (cod_motorista, cod_ponto, data_hora)
SELECT u.id_usuario, p.id_ponto, '2025-07-10 06:45:00'
FROM Usuario u, Ponto p
WHERE u.nome_usuario = 'James' AND p.descricao = 'Ponto Central - Terminal Principal';

INSERT INTO Presenca (cod_motorista, cod_ponto, data_hora)
SELECT u.id_usuario, p.id_ponto, '2025-07-10 07:00:00'
FROM Usuario u, Ponto p
WHERE u.nome_usuario = 'James' AND p.descricao = 'Av. Norte - Estação 1';

-- (segue o mesmo padrão para os outros registros de presença...)

-- ========================================
-- Inserir chats
-- ========================================
INSERT INTO Chat (cod_passageiro, cod_motorista)
SELECT u1.id_usuario, u2.id_usuario
FROM Usuario u1, Usuario u2
WHERE u1.nome_usuario = 'Ana Souza' AND u2.nome_usuario = 'James';

INSERT INTO Chat (cod_passageiro, cod_motorista)
SELECT u1.id_usuario, u2.id_usuario
FROM Usuario u1, Usuario u2
WHERE u1.nome_usuario = 'Bruno Lima' AND u2.nome_usuario = 'Leandro';

ALTER TABLE public.locations ADD CONSTRAINT unique_user_id UNIQUE (user_id);